// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	goverment "project-capston/features/goverment"

	mock "github.com/stretchr/testify/mock"
)

// GovermentData is an autogenerated mock type for the GovernmentDataInterface type
type GovermentData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *GovermentData) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *GovermentData) Insert(input goverment.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(goverment.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: id
func (_m *GovermentData) Select(id uint) (goverment.Core, error) {
	ret := _m.Called(id)

	var r0 goverment.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (goverment.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) goverment.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(goverment.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields: pageNumber, pageSize
func (_m *GovermentData) SelectAll(pageNumber int, pageSize int) ([]goverment.Core, error) {
	ret := _m.Called(pageNumber, pageSize)

	var r0 []goverment.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]goverment.Core, error)); ok {
		return rf(pageNumber, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []goverment.Core); ok {
		r0 = rf(pageNumber, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goverment.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(pageNumber, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectCountUnit provides a mock function with given fields:
func (_m *GovermentData) SelectCountUnit() (goverment.UnitCount, error) {
	ret := _m.Called()

	var r0 goverment.UnitCount
	var r1 error
	if rf, ok := ret.Get(0).(func() (goverment.UnitCount, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() goverment.UnitCount); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(goverment.UnitCount)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectNearestLocation provides a mock function with given fields: latitude, longitude, radius
func (_m *GovermentData) SelectNearestLocation(latitude float64, longitude float64, radius float64) ([]goverment.Location, error) {
	ret := _m.Called(latitude, longitude, radius)

	var r0 []goverment.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(float64, float64, float64) ([]goverment.Location, error)); ok {
		return rf(latitude, longitude, radius)
	}
	if rf, ok := ret.Get(0).(func(float64, float64, float64) []goverment.Location); ok {
		r0 = rf(latitude, longitude, radius)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goverment.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(float64, float64, float64) error); ok {
		r1 = rf(latitude, longitude, radius)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, input
func (_m *GovermentData) Update(id uint, input goverment.Core) error {
	ret := _m.Called(id, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, goverment.Core) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGovermentData interface {
	mock.TestingT
	Cleanup(func())
}

// NewGovermentData creates a new instance of GovermentData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGovermentData(t mockConstructorTestingTNewGovermentData) *GovermentData {
	mock := &GovermentData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
