// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	emergency "project-capston/features/emergency"
	helper "project-capston/helper"

	mock "github.com/stretchr/testify/mock"
)

// EmergencyData is an autogenerated mock type for the EmergencyDataInterface type
type EmergencyData struct {
	mock.Mock
}

// ActionGmail provides a mock function with given fields: input
func (_m *EmergencyData) ActionGmail(input string) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *EmergencyData) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncloseEmergency provides a mock function with given fields: idEmergency
func (_m *EmergencyData) IncloseEmergency(idEmergency uint) error {
	ret := _m.Called(idEmergency)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(idEmergency)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *EmergencyData) Insert(input emergency.EmergencyEntity) (uint, error) {
	ret := _m.Called(input)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(emergency.EmergencyEntity) (uint, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(emergency.EmergencyEntity) uint); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(emergency.EmergencyEntity) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields: param, token, idCall, level
func (_m *EmergencyData) SelectAll(param emergency.QueryParams, token string, idCall uint, level string) (int64, []emergency.EmergencyEntity, error) {
	ret := _m.Called(param, token, idCall, level)

	var r0 int64
	var r1 []emergency.EmergencyEntity
	var r2 error
	if rf, ok := ret.Get(0).(func(emergency.QueryParams, string, uint, string) (int64, []emergency.EmergencyEntity, error)); ok {
		return rf(param, token, idCall, level)
	}
	if rf, ok := ret.Get(0).(func(emergency.QueryParams, string, uint, string) int64); ok {
		r0 = rf(param, token, idCall, level)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(emergency.QueryParams, string, uint, string) []emergency.EmergencyEntity); ok {
		r1 = rf(param, token, idCall, level)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]emergency.EmergencyEntity)
		}
	}

	if rf, ok := ret.Get(2).(func(emergency.QueryParams, string, uint, string) error); ok {
		r2 = rf(param, token, idCall, level)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectById provides a mock function with given fields: id, token
func (_m *EmergencyData) SelectById(id uint, token string) (emergency.EmergencyEntity, error) {
	ret := _m.Called(id, token)

	var r0 emergency.EmergencyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) (emergency.EmergencyEntity, error)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(uint, string) emergency.EmergencyEntity); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(emergency.EmergencyEntity)
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(id, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUser provides a mock function with given fields: id, token
func (_m *EmergencyData) SelectUser(id string, token string) (emergency.UserEntity, error) {
	ret := _m.Called(id, token)

	var r0 emergency.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (emergency.UserEntity, error)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) emergency.UserEntity); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(emergency.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendNotification provides a mock function with given fields: input
func (_m *EmergencyData) SendNotification(input helper.MessageGomailE) (string, error) {
	ret := _m.Called(input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(helper.MessageGomailE) (string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(helper.MessageGomailE) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(helper.MessageGomailE) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SumEmergency provides a mock function with given fields:
func (_m *EmergencyData) SumEmergency() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, id
func (_m *EmergencyData) Update(input emergency.EmergencyEntity, id uint) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(emergency.EmergencyEntity, uint) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEmergencyData interface {
	mock.TestingT
	Cleanup(func())
}

// NewEmergencyData creates a new instance of EmergencyData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEmergencyData(t mockConstructorTestingTNewEmergencyData) *EmergencyData {
	mock := &EmergencyData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
